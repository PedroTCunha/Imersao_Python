# -*- coding: utf-8 -*-
"""Imersão Python - aula 04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I6Lq6BvaWEDQ1DPsiqTGpFycsBM3jK3O

# **Criando Gráficos de Candlestick com Matplotlib**
"""

!pip install mplfinance

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import mplfinance as mpf
import yfinance as yf
import plotly.graph_objects as go
from plotly.subplots import make_subplots

dados = yf.download("PETR4.SA", start="2023-01-01", end="2023-12-31")
dados

dados.columns = ["abertura", "maximo", "minimo", "fechamento", "fech_ajus", "volume"]

dados = dados.rename_axis("data")
dados

dados["fechamento"].plot(figsize=(10,6))
plt.title("Variação do preço por data", fontsize=16)
plt.legend(['Fechamento'])

df = dados.head(60).copy()
df["data"] = df.index

df["data"] = df["data"].apply(mdates.date2num)

fig, ax = plt.subplots(figsize=(15,8))

width = 0.7

for i in range(len(df)): #repetição

  if df["fechamento"].iloc[i] > df["abertura"].iloc[i]:
    color = "green"
  else:
    color = "red"



  ax.plot([df['data'].iloc[i], df['data'].iloc[i]],
          [df["minimo"].iloc[i], df["maximo"].iloc[i]],
          color=color,
          linewidth=1)

  ax.add_patch(plt.Rectangle((df["data"].iloc[i] - width/2, min(df["abertura"].iloc[i], df["fechamento"].iloc[i])),
                              width,
                              abs(df["fechamento"].iloc[i] - df["abertura"].iloc[i]),
                              facecolor=color))

df["MA7"] = df["fechamento"].rolling(window=7).mean()
df["MA14"] = df["fechamento"].rolling(window=14).mean()

ax.plot(df["data"], df["MA7"], color="orange", label="Média Móvel 7 Dias")
ax.plot(df["data"], df["MA14"], color="yellow", label="Média Móvel 14 Dias")

ax.legend()

ax.xaxis_date()
ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
plt.xticks(rotation=45)

plt.title("Gráfico de Candlestick - PETR4.SA com matplotlib")
plt.xlabel("Data")
plt.ylabel("Preço")

plt.grid(True)

plt.show()

# Criando subplots
'''
"Primeiro, criamos uma figura que conterá nossos gráficos usando make_subplots.
Isso nos permite ter múltiplos gráficos em uma única visualização.
Aqui, teremos dois subplots: um para o gráfico de candlestick e outro para o volume de transações."

'''
fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                    vertical_spacing=0.1,
                    subplot_titles=('Candlesticks', 'Volume Transacionado'),
                    row_width=[0.2, 0.7])

'''
"No gráfico de candlestick, cada candle representa um dia de negociação,
mostrando o preço de abertura, fechamento, máximo e mínimo. Vamos adicionar este gráfico à nossa figura."
'''
# Adicionando o gráfico de candlestick
fig.add_trace(go.Candlestick(x=df.index,
                             open=df['abertura'],
                             high=df['maximo'],
                             low=df['minimo'],
                             close=df['fechamento'],
                             name='Candlestick'),
                             row=1, col=1)

# Adicionando as médias móveis
# Adicionamos também médias móveis ao mesmo subplot para análise de tendências
fig.add_trace(go.Scatter(x=df.index,
                         y=df['MA7'],
                         mode='lines',
                         name='MA7 - Média Móvel 7 Dias'),
                         row=1, col=1)

fig.add_trace(go.Scatter(x=df.index,
                         y=df['MA14'],
                         mode='lines',
                         name='MA14 - Média Móvel 14 Dias'),
                         row=1, col=1)

# Adicionando o gráfico de barras para o volume
# Em seguida, criamos um gráfico de barras para o volume de transações, que nos dá uma ideia da atividade de negociação naquele dia
fig.add_trace(go.Bar(x=df.index,
                     y=df['volume'],
                     name='Volume'),
                     row=2, col=1)

# Atualizando layout
#Finalmente, configuramos o layout da figura, ajustando títulos, formatos de eixo e outras configurações para tornar o gráfico claro e legível.
fig.update_layout(yaxis_title='Preço',
                  xaxis_rangeslider_visible=False,  # Desativa o range slider
                  width=1100, height=600)

# Mostrando o gráfico
fig.show()

dados = yf.download("PETR4.SA", start="2023-01-01", end="2023-12-31")

mpf.plot(dados.head(30), type="candle", figsize = (16,8), volume=True, mav=(7,14), style='yahoo')